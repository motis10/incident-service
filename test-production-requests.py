#!/usr/bin/env python3
"""
Production mode request/response testing for Netanya Incident Service.
Tests the main API endpoints in production mode using mock SharePoint.
"""
import requests
import json
import base64
import time
import sys
import os
from typing import Dict, Any

def create_test_file() -> str:
    """Create a test base64 encoded image file."""
    # Create a small test PNG image (1x1 pixel)
    png_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\nIDATx\x9cc\xf8\x0f\x00\x00\x01\x00\x01\x00\x18\xdd\x8d\xb4\x00\x00\x00\x00IEND\xaeB`\x82'
    return base64.b64encode(png_data).decode('utf-8')

def test_production_incident_submission(base_url: str = "http://localhost:8000") -> None:
    """Test incident submission in production mode."""
    print("üéØ PRODUCTION MODE - REQUEST/RESPONSE TESTING")
    print("=" * 60)
    
    test_cases = [
        {
            "name": "Basic Incident Submission (No File)",
            "data": {
                "user_data": {
                    "first_name": "◊ì◊ï◊ì",
                    "last_name": "◊î◊§◊ß◊î",
                    "phone": "0501234567",
                    "email": "david.production@netanya.muni.il"
                },
                "category": {
                    "id": 1,
                    "name": "◊™◊ê◊ï◊®◊î",
                    "text": "Street lighting issues",
                    "image_url": "https://example.com/lighting.jpg",
                    "event_call_desc": "◊§◊†◊° ◊®◊ó◊ï◊ë ◊ú◊ê ◊¢◊ï◊ë◊ì"
                },
                "street": {
                    "id": 123,
                    "name": "◊î◊®◊¶◊ú",
                    "image_url": "https://example.com/street.jpg",
                    "house_number": "25"
                },
                "custom_text": "üîß ◊ë◊ì◊ô◊ß◊™ ◊û◊¶◊ë ◊§◊®◊ï◊ì◊ß◊©◊ü - ◊ë◊¢◊ô◊ô◊™ ◊™◊ê◊ï◊®◊î ◊®◊ó◊ï◊ë"
            }
        },
        {
            "name": "Incident with File Attachment",
            "data": {
                "user_data": {
                    "first_name": "◊û◊®◊ô◊ù",
                    "last_name": "◊§◊®◊ï◊ì◊ß◊©◊ü",
                    "phone": "0507654321",
                    "email": "miriam.prod@netanya.muni.il"
                },
                "category": {
                    "id": 2,
                    "name": "◊†◊ô◊ß◊ô◊ï◊ü",
                    "text": "Cleaning issues",
                    "image_url": "https://example.com/cleaning.jpg",
                    "event_call_desc": "◊ñ◊ë◊ú ◊ë◊®◊ó◊ï◊ë"
                },
                "street": {
                    "id": 456,
                    "name": "◊ï◊ô◊¶◊û◊ü",
                    "image_url": "https://example.com/weizmann.jpg",
                    "house_number": "50"
                },
                "custom_text": "üì∏ ◊ô◊© ◊™◊û◊ï◊†◊î ◊î◊û◊ï◊õ◊ô◊ó◊î ◊ê◊™ ◊î◊ë◊¢◊ô◊î",
                "extra_files": [
                    {
                        "filename": "evidence.png",
                        "content_type": "image/png",
                        "file_data": create_test_file()
                    }
                ]
            }
        },
        {
            "name": "Long Description Test",
            "data": {
                "user_data": {
                    "first_name": "◊ê◊ë◊ô",
                    "last_name": "◊ò◊°◊ò◊®",
                    "phone": "0501112233",
                    "email": "avi.tester@netanya.muni.il"
                },
                "category": {
                    "id": 3,
                    "name": "◊õ◊ë◊ô◊©◊ô◊ù",
                    "text": "Road maintenance",
                    "image_url": "https://example.com/roads.jpg",
                    "event_call_desc": "◊ë◊¢◊ô◊î ◊ë◊õ◊ë◊ô◊©"
                },
                "street": {
                    "id": 789,
                    "name": "◊ë◊ü ◊í◊ï◊®◊ô◊ï◊ü",
                    "image_url": "https://example.com/bengurion.jpg",
                    "house_number": "100"
                },
                "custom_text": "üõ£Ô∏è ◊ë◊ì◊ô◊ß◊™ ◊ò◊ß◊°◊ò ◊ê◊®◊ï◊ö ◊û◊ê◊ï◊ì: ◊ô◊© ◊ë◊¢◊ô◊î ◊ó◊û◊ï◊®◊î ◊ë◊õ◊ë◊ô◊© ◊î◊®◊ê◊©◊ô ◊©◊ú ◊î◊¢◊ô◊®, ◊¢◊ù ◊ë◊ï◊®◊ï◊™ ◊í◊ì◊ï◊ú◊ô◊ù ◊©◊í◊ï◊®◊û◊ô◊ù ◊†◊ñ◊ß ◊ú◊®◊õ◊ë◊ô◊ù. ◊î◊ë◊¢◊ô◊î ◊ß◊ô◊ô◊û◊™ ◊õ◊ë◊® ◊û◊°◊§◊® ◊ó◊ï◊ì◊©◊ô◊ù ◊ï◊ì◊ï◊®◊©◊™ ◊ò◊ô◊§◊ï◊ú ◊ì◊ó◊ï◊£. ◊™◊ï◊©◊ë◊ô◊ù ◊®◊ë◊ô◊ù ◊î◊™◊ú◊ï◊†◊†◊ï ◊¢◊ú ◊î◊†◊ï◊©◊ê ◊ï◊ê◊£ ◊†◊í◊®◊ù ◊†◊ñ◊ß ◊ú◊®◊õ◊ë◊ô◊ù. ◊ë◊†◊ï◊°◊£, ◊î◊ë◊¢◊ô◊î ◊û◊î◊ï◊ï◊î ◊°◊õ◊†◊î ◊ë◊ò◊ô◊ó◊ï◊™◊ô◊™ ◊û◊©◊û◊¢◊ï◊™◊ô◊™ ◊ú◊†◊ï◊°◊¢◊ô◊ù ◊ï◊ú◊î◊ï◊ú◊õ◊ô ◊î◊®◊í◊ú ◊ë◊ê◊ñ◊ï◊®. ◊ì◊®◊ï◊©◊î ◊§◊¢◊ï◊ú◊î ◊û◊ô◊ô◊ì◊ô◊™ ◊ú◊™◊ô◊ß◊ï◊ü ◊î◊õ◊ë◊ô◊© ◊ï◊î◊ó◊ñ◊®◊™ ◊î◊ë◊ò◊ô◊ó◊ï◊™ ◊ú◊ê◊ñ◊ï◊®."
            }
        }
    ]
    
    print(f"\nüåê Testing against: {base_url}")
    print(f"üìÖ Test time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Test service health first
    print(f"\n0Ô∏è‚É£ Pre-flight Health Check...")
    try:
        health_response = requests.get(f"{base_url}/health")
        if health_response.status_code == 200:
            health_data = health_response.json()
            print(f"   ‚úÖ Service Status: {health_data.get('status')}")
            print(f"   üîß Debug Mode: {health_data.get('debug_mode')}")
            print(f"   üåç Environment: {health_data.get('environment', 'unknown')}")
        else:
            print(f"   ‚ùå Health check failed: {health_response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Health check error: {e}")
        return
    
    # Run incident submission tests
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}Ô∏è‚É£ {test_case['name']}")
        print("-" * 40)
        
        start_time = time.time()
        
        try:
            # Make the request
            response = requests.post(
                f"{base_url}/incidents/submit",
                json=test_case['data'],
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            end_time = time.time()
            response_time = (end_time - start_time) * 1000
            
            # Parse response
            try:
                response_data = response.json()
            except:
                response_data = {"raw_response": response.text}
            
            # Display results
            print(f"   üìä Status Code: {response.status_code}")
            print(f"   ‚è±Ô∏è  Response Time: {response_time:.2f}ms")
            
            if response.status_code == 200:
                print("   ‚úÖ SUCCESS")
                ticket_id = response_data.get('ticket_id', 'N/A')
                correlation_id = response_data.get('correlation_id', 'N/A')
                print(f"   üé´ Ticket ID: {ticket_id}")
                print(f"   üîç Correlation ID: {correlation_id}")
                
                # Check for file processing info
                if 'file_info' in response_data:
                    file_info = response_data['file_info']
                    print(f"   üìé File: {file_info.get('filename')} ({file_info.get('size_mb')}MB)")
                
                results.append({"test": test_case['name'], "status": "PASS", "time": response_time})
                
            elif response.status_code == 422:
                print("   ‚ö†Ô∏è  VALIDATION ERROR")
                errors = response_data.get('field_errors', [])
                for error in errors[:3]:  # Show first 3 errors
                    print(f"      ‚Ä¢ {error.get('field', 'unknown')}: {error.get('message', 'validation error')}")
                results.append({"test": test_case['name'], "status": "VALIDATION_ERROR", "time": response_time})
                
            elif response.status_code >= 500:
                print("   ‚ùå SERVER ERROR")
                error_msg = response_data.get('error', response_data.get('details', 'Unknown error'))
                correlation_id = response_data.get('correlation_id', 'N/A')
                print(f"      Error: {error_msg}")
                print(f"      Correlation ID: {correlation_id}")
                results.append({"test": test_case['name'], "status": "SERVER_ERROR", "time": response_time})
                
            else:
                print(f"   ‚ùì UNEXPECTED STATUS: {response.status_code}")
                print(f"      Response: {str(response_data)[:200]}...")
                results.append({"test": test_case['name'], "status": "UNEXPECTED", "time": response_time})
            
            # Show response headers of interest
            interesting_headers = ['x-correlation-id', 'x-request-id', 'content-type']
            for header in interesting_headers:
                if header in response.headers:
                    print(f"   üìã {header}: {response.headers[header]}")
                    
        except requests.exceptions.Timeout:
            print("   ‚è∞ REQUEST TIMEOUT")
            results.append({"test": test_case['name'], "status": "TIMEOUT", "time": 30000})
            
        except requests.exceptions.ConnectionError:
            print("   üîå CONNECTION ERROR")
            results.append({"test": test_case['name'], "status": "CONNECTION_ERROR", "time": 0})
            
        except Exception as e:
            print(f"   üí• UNEXPECTED ERROR: {e}")
            results.append({"test": test_case['name'], "status": "ERROR", "time": 0})
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä PRODUCTION TESTING SUMMARY")
    print("=" * 60)
    
    passed = sum(1 for r in results if r['status'] in ['PASS'])
    total = len(results)
    avg_time = sum(r['time'] for r in results if r['time'] > 0) / max(1, len([r for r in results if r['time'] > 0]))
    
    for result in results:
        status_emoji = {
            'PASS': '‚úÖ',
            'VALIDATION_ERROR': '‚ö†Ô∏è',
            'SERVER_ERROR': '‚ùå',
            'TIMEOUT': '‚è∞',
            'CONNECTION_ERROR': 'üîå',
            'ERROR': 'üí•',
            'UNEXPECTED': '‚ùì'
        }.get(result['status'], '‚ùì')
        
        print(f"   {status_emoji} {result['test']}: {result['status']} ({result['time']:.0f}ms)")
    
    print(f"\nüéØ Results: {passed}/{total} tests passed")
    print(f"‚è±Ô∏è  Average response time: {avg_time:.2f}ms")
    
    if passed == total:
        print("üéâ ALL PRODUCTION TESTS PASSED!")
        return True
    else:
        print("‚ö†Ô∏è  SOME TESTS FAILED - CHECK LOGS")
        return False

if __name__ == "__main__":
    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8000"
    success = test_production_incident_submission(base_url)
    sys.exit(0 if success else 1)
