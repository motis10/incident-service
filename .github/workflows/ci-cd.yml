name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Run unit tests
      run: |
        PYTHONPATH=src python -m pytest tests/test_core_unit_tests.py -v --cov=app --cov-report=xml
    
    - name: Run integration tests
      run: |
        PYTHONPATH=src python -m pytest tests/test_api_integration.py tests/test_file_upload_integration.py -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.13'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: 3.13
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: black --check --diff src/ tests/
    
    - name: Run isort import sorting check
      run: isort --check-only --diff src/ tests/
    
    - name: Run flake8 linting
      run: flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503
    
    - name: Run mypy type checking
      run: mypy src/ --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: 3.13
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run safety check for vulnerabilities
      run: safety check
    
    - name: Run bandit security linting
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-test:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run Docker Compose tests
      run: |
        # Use the built image for testing
        export IMAGE_TAG=${GITHUB_SHA}
        docker-compose up -d --build
        sleep 30  # Wait for services to start
        
        # Run health checks
        curl -f http://localhost:8000/health || exit 1
        
        # Run basic API test
        curl -f -X POST http://localhost:8000/incidents/submit \
          -H "Content-Type: application/json" \
          -d '{
            "user_data": {"first_name": "Test", "last_name": "User", "phone": "0501234567"},
            "category": {"id": 1, "name": "◊™◊ê◊ï◊®◊î", "text": "Street lighting", "image_url": "https://example.com/light.jpg", "event_call_desc": "◊§◊†◊° ◊®◊ó◊ï◊ë"},
            "street": {"id": 123, "name": "◊î◊®◊¶◊ú", "image_url": "https://example.com/street.jpg", "house_number": "15"},
            "custom_text": "CI/CD test submission"
          }' || exit 1
        
        docker-compose down

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_STAGING }}
        project_id: ${{ secrets.GCP_PROJECT_ID_STAGING }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy netanya-incident-service-staging \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=staging,DEBUG_MODE=true" \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_PRODUCTION }}
        project_id: ${{ secrets.GCP_PROJECT_ID_PRODUCTION }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy netanya-incident-service \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=production,DEBUG_MODE=false" \
          --set-secrets="SHAREPOINT_ENDPOINT=sharepoint-endpoint:latest" \
          --memory=1Gi \
          --cpu=2 \
          --min-instances=1 \
          --max-instances=100 \
          --concurrency=80

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes in this release" > CHANGELOG.md
        git log --pretty=format:"- %s (%an)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
    
    - name: Update release notes
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
          
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: changelog
          });

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "üöÄ Deployment successful!"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
    
    - name: Notify Failure
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs and retry the deployment."
        exit 1
